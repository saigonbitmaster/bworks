set password


#folder
boot/ext-*.js to define remote method files with format:
folder/model-name/.js 

models folder:
model-config.json

post /AppUsers/reset
body:
{
"email": "bitmaster.sg@gmail.com"
}

user-hook.js will email with temp token use this token to set password:
curl -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Accept: application/json' -d 'newPassword=123456789' 'http://localhost:4001/api/AppUsers/reset-password?access_token=lrKvUMiPNabRIAjEZGx2oCw6EKQyXrOzezBKjgz9pt4AZBwWYudAdG82e3SSPQJx'



- Show notification on client screen
import { Notification, defaultTheme } from 'react-admin';
import { showNotification } from 'ra-core';

  submit = values => {
    const { dataProvider, showNotification } = this.props;
    dataProvider(CUSTOM, 'AppUsers', {
      method: 'POST',
      fullUrl: false,
      body: { ...values }
    })
      .then(() => {
        showNotification('Account is created, please verify email');
      })
      .catch(err => {
        showNotification(err ? err.message : 'error.INTERNAL_SERVER_ERROR', 'warning');
      });
  };


  render() {
   
    return (
       <div>
        
          <Notification /> -> component to show message at the bottom
        </div>
    );
  }
}

export default connect(null, { showNotification })(SubmitPage);


#error log return to fetch and log to db
without this model, the error will not detail.
  "ErrorLog": {
    "dataSource": "bWorkSystem",
    "public": true
  },

#new input component 
import { Field } from 'redux-form';
import React, { Component } from 'react';

const SampleInput = (props) =>(
    <span>
        <Field  name={props.source}  component="input" type="datetime-local" placeholder="sample input" />
      
    </span>
);
export default SampleInput;

#aggregation
const aggregate = require('../../utils/aggregate');


let query = [
      {
        $match: {
          status: 'ACTIVE',
          quarterId: { $in: quarters },
        },
      }
    ];
let _data = await aggregate(ClientMeterNumber.app.models.Client, query);

#custom list, edit, action button to work with remote methods instead of default CRUD
#define routes for custom action buttons
import List from './list';
import Edit from './edit';
import Create from './create';
import Custom from './historyList';

export default {
  name: 'customRoute',
  icon: Icon,
  url: 'customRoute',
  label: 'generic.pages.customRoute',
  resources: ['remoteMethod1s', 'remoteMethod2s', 'remoteMethod3s'],
  screens: {
    list: List,
    editClientMeterNumber: { component: Edit, subPath: 'edit/:id' },
    createWithMonth: { component: Create, subPath: ':clientId/:month' },
    history: { component: Custom, subPath: ':id' },
  },
  active: true,
  access: {
  },
};


#push to component
this.props.push(`${basePath}/createWithMonth/${record.id}/${currentMonthYear}`);

#get param from url
const { clientId, month: monthYear } = props.match.params;

#remote method template
'use strict';
module.exports = BiddingJob => {
  BiddingJob.rankBid = async () => {
    return [1, 2, 3];
  };

  BiddingJob.remoteMethod('rankBid', {
    accepts: [
      { arg: 'userId', type: 'string', required: true },
      { arg: 'limit', type: 'number' },
    ],
    http: { verb: 'get' },
    returns: { arg: 'data', type: 'object', root: true },
  });
};

http://localhost:4001/api/BiddingJobs/rankBid?userId=1&limit=1&access_token=xnOW4DXEbGyuEM5VVVAH3a7lcTsoa9WVntZ3wGRQxtVTPgVWP3ilO7ZEWVCCXKM8
return:
{"data":[1,2,3]}
root: true:
[1,2,3]


//return for react admin create must be: {id: "abc"}
//ceate to remote method 
'use strict';
// eslint-disable-next-line no-unused-vars
module.exports = function(JobType){

  JobType.abc = function(msg, cb) {
    let result = {id: "123"}
    cb(null, result);
  }

  JobType.remoteMethod('abc', {
        accepts: {arg: 'msg', type: 'string'},
        http: { verb: 'post'},
        returns: {arg: 'data', type: 'object', root: true}
  });
};

//client
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import {
  Create,
  FlexForm,
  TextInput,
  required,
  translate,
  SelectInput,
  EditorInput,
  DateTimeInput,
  NumberInput,
  ArrayInput,
  SelectArrayInput,
  SimpleFormIterator,
  BooleanInput,
  ReferenceArrayInput,
} from 'ra-loopback3';
import { Grid, Hidden } from '@material-ui/core';

import compose from 'recompose/compose';

class CreatePostJob extends Component {
  render() {
    const { props } = this;
    return (
      <Create {...props} resource="jobtypes/abc">
      
      </Create>
    );
  }
}
==


let res = await dataProvider(CUSTOM, 'resources', {
      method: 'get',
      subUrl: 'getDataChartReportFlow',
      query: { filter: JSON.stringify(filter) },
    });


#get username for a request
module.exports = BiddingJob => {
  BiddingJob.rankBid = async (jobId, filter, options
  ) => {
    console.log('currentUser.username: ',options.accessToken.userId); 
    const username = await BiddingJob.app.models.AppUser.findById(options.accessToken.userId);
    console.log(username);
    return username;
  };

  BiddingJob.remoteMethod('rankBid', {
    accepts: [
      { arg: 'jobId', type: 'string', required: true },
      { arg: 'filter', type: 'object' },
      {arg: "options", type: "object", http: "optionsFromRequest"}
    ],
    http: { verb: 'get' },
    returns: { arg: 'data', type: 'object', root: true },
  });
};


#operations and remote hooks
operation hooks use for standard operation: GET, POST ...
access = GET ... 
https://loopback.io/doc/en/lb3/Operation-hooks.html


  BiddingJob.observe('access', function(ctx, next) {
    let a = true
    if(a) {
      next(new Error('Access denied')); //return error 
    } else {
      next()                           //perform normal
    }
  });
};

remote hooks use for remote method calls 
modelName.beforeRemote( methodName, function( ctx, next) {
    //...
    next();
});


#secure post, delete update jobs, bids by right appUser -> use operation hook apply to standard operation POST, DELETE, UPDATE

#add with yarn version to fix error "expected workspace package to exist for":
 npx yarn@1.19.0 workspace bworks-api add @octokit/core